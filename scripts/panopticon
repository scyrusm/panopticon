#! /usr/bin/env python

import click
import panopticon
import pkg_resources
@click.group()
@click.version_option(version=pkg_resources.require("panopticon")[0].version)
def cli():
    """Panopticon is a set of tools named after Jeremy Bentham's model for a prison, whereby multiple cells (!) could be observed with ease by a single individual.  
    """

@cli.command(short_help="Computes the Windowed Mean Expression (WME) and performs a umap clustering thereof")
@click.option(
    '--patient', help='selected patient number', required=True, multiple=True)
@click.option(
    '--cell_type',
    help='name of cell type of interest in the metadata')
@click.option(
    '--complexity_cutoff', help='Cutoff on cell complexity (i.e., include only cells with complexity equal to or above this value)', type=int, default=0)
@click.option(
        '--n_clusters', help='Number of clusters to look for', default=1, type=int)
@click.option(
        '--figure_output', help='Output file for umap, should end in e.g. .pdf, .jpg, .png, .svg', default=None)
@click.argument('loomfile')
def wmec(loomfile, patient, cell_type, complexity_cutoff, n_clusters, figure_output):
    from panopticon.commands import windowed_mean_expression_clustering as wmec
    wmec.windowed_mean_expression_clustering_main(loomfile, patient, cell_type, complexity_cutoff, n_clusters, figure_output)

@cli.command(short_help="For checking the malignancy status of cells with a paired DNA-derived"
                        "segmentation file (returns a Mann-Whitney Z score and the p-value for"
                        "the null hypothesis that there is no positive trend")
@click.option(
        '--seg_file',
        help='path and filename of the segmentation file',
        required=True)
@click.option(
        '--patient', help='selected patient number', required=True)
@click.option(
        '--time_point', help='selected time point', type=int)
@click.option(
        '--output', help='output file name (must be matplotlib-compatible e.g. pdf, png, jpg)', type=str)
@click.argument('loomfile')
def rna_dna_correspondence(loomfile, seg_file, patient, time_point, output):
    if output.split('.')[-1] not in ['ps', 'pdf', 'eps', 'pgf', 'png', 'raw', 'rgba', 'svg', 'svgz', 'jpeg', 'jpg', 'tif', 'tiff']:
        raise Exception("File output must be in matplotlib-compatible format")
    from panopticon.commands import rna_dna_correspondence as rdc
    rdc.rna_dna_correspondence_main(loomfile, seg_file, 'patient_ID', patient, time_point, output=output)

@cli.group(short_help="A well-functioning surveillance state requires some bureaucracy.")
def book():
    pass

@book.command()
def scrna_wizard():
    """
    A prompt-guided approach to generating a panopticon-compatible .loom file
    """
    from panopticon.commands import bookem
    bookem.scrna_wizard_main()

@book.command()
def cnv_wizard():
    """
    A prompt-guided approach to generating a panopticon-compatible .loom file
    """
    from panopticon.commands import bookem
    bookem.cnv_wizard_main()

@book.command()
@click.argument('loomfile')
def gene_position_augmentation(loomfile):
    from panopticon.commands import bookem
    bookem.gene_position_augmentation_main(loomfile)


@book.command()
@click.option(
        '--signaturefile',
        help='gene signature file (headerless, single column)')
@click.option(
        '--loomfile',
        help='gene signature file (headerless, single column)')
def gene_signature_wizard(loomfile, signaturefile):
    """
    A prompt-guide approach to augmenting your loom file with gene signatures of interest.
    """
    bookem.gene_signature_wizard_main(loomfile=loomfile, signaturefile=signaturefile)



@cli.command()
@click.option(
        '--seg',
        help='name of the segmentation',multiple=True, required=True)
@click.option(
        '--query', help='query on loom file', multiple=True)
@click.option(
        '--output', help='output file name (must be matplotlib-compatible e.g. pdf, png, jpg)', type=str)
@click.option(
        '--stratifyby', help='stratify results by some metadata column (e.g. time_point)', type=str)
@click.option(
        '--signature', help='Examine with gene signature (a la AddModuleScore)', type=str)
@click.argument('loomfile')
def multireference_dna_correspondence(loomfile, query, seg, output, stratifyby, signature):
    if output is not None:
        if output.split('.')[-1] not in ['ps', 'pdf', 'eps', 'pgf', 'png', 'raw', 'rgba', 'svg', 'svgz', 'jpeg', 'jpg', 'tif', 'tiff']:
            raise Exception("File output must be in matplotlib-compatible format")
    from panopticon.commands import multireference_dna_correspondence as mdc
    mdc.multireference_dna_correspondence_main(loomfile, query, seg, output=output, stratifyby=stratifyby, modulescore_signature=signature)



if __name__=='__main__':
    cli()
